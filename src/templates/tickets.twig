{% extends "layout.twig" %}

{% block title %}Ticket Management - TicketFlow{% endblock %}

{% block content %}
<div style="min-height: 100vh; display: flex; flex-direction: column">
    <!-- Header -->
    <header class="header">
        <div class="container header-content">
            <div class="logo">TicketFlow</div>
            <nav class="nav-links">
                <div style="display: flex; align-items: center; gap: 1rem">
                    <span style="color: #6b7280">
                        Welcome, <strong id="username"></strong>
                    </span>
                    <button class="btn btn-secondary" onclick="logout()">
                        Logout
                    </button>
                </div>
            </nav>
        </div>
    </header>

    <!-- Delete confirmation modal -->
    <div id="delete-modal" class="modal-overlay hidden" onclick="hideDeleteModal()">
        <div class="modal" onclick="event.stopPropagation()">
            <h3>Delete Ticket</h3>
            <p style="color: #6b7280; margin-bottom: 1.5rem">
                Are you sure you want to delete this ticket? This action cannot be undone.
            </p>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="hideDeleteModal()">Cancel</button>
                <button class="btn btn-danger" onclick="confirmDelete()">Delete</button>
            </div>
        </div>
    </div>

    <!-- Main content -->
    <div class="tickets-page">
        <div class="container">
            <div class="tickets-header">
                <div>
                    <h1>Ticket Management</h1>
                    <p style="color: #6b7280; margin-top: 0.25rem">
                        Create, view, edit, and delete your tickets
                    </p>
                </div>
                <button class="btn btn-primary" onclick="showTicketForm()">New Ticket</button>
            </div>

            <!-- Ticket form -->
            <div id="ticket-form" class="ticket-form hidden">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem">
                    <h2 id="form-title">Create New Ticket</h2>
                    <button onclick="hideTicketForm()" style="background: none; border: none; cursor: pointer; padding: 0.5rem">
                        ‚úñ
                    </button>
                </div>

                <form id="ticket-submit-form">
                    <input type="hidden" id="ticket-id" name="id" />

                    <div class="form-group">
                        <label for="title">Title *</label>
                        <input type="text" id="title" name="title" required />
                    </div>

                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea id="description" name="description" rows="4"></textarea>
                    </div>

                    <div class="form-group">
                        <label for="status">Status *</label>
                        <select id="status" name="status" required>
                            <option value="open">Open</option>
                            <option value="in_progress">In Progress</option>
                            <option value="closed">Closed</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="priority">Priority</label>
                        <select id="priority" name="priority">
                            <option value="low">Low</option>
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>

                    <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 1.5rem">
                        <button type="button" class="btn btn-secondary" onclick="hideTicketForm()">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="submit-btn">Create Ticket</button>
                    </div>
                </form>
            </div>

            <div id="tickets-list" class="ticket-grid"></div>

            <div id="empty-state" class="empty-state hidden">
                <h3>No tickets yet</h3>
                <p>Create your first ticket to get started</p>
                <button class="btn btn-primary" onclick="showTicketForm()">Create First Ticket</button>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <p>&copy; 2025 TicketFlow. All rights reserved.</p>
        </div>
    </footer>
</div>

{% block extra_js %}
<script>
// =========================
// AUTH FUNCTIONS
// =========================
function protectPage() {
  const user = localStorage.getItem("currentUser");
  if (!user) window.location.href = "index.php?page=login";
}

function getCurrentUser() {
  try { return JSON.parse(localStorage.getItem("currentUser")); }
  catch { return null; }
}

function logout() {
  localStorage.removeItem("currentUser");
  window.location.href = "index.php?page=login";
}

// =========================
// STORAGE FUNCTIONS
// =========================
function initializeSampleTickets() {
  const existing = localStorage.getItem("tickets");
  if (!existing || JSON.parse(existing).length === 0) {
    const sampleTickets = [
      {
        id: "ticket_1",
        title: "Login Issue",
        description: "Users cannot login with correct credentials",
        status: "open",
        priority: "high",
        createdAt: new Date().toISOString(),
      },
      {
        id: "ticket_2",
        title: "Dashboard Loading Slow",
        description: "Dashboard takes more than 5 seconds to load",
        status: "in_progress",
        priority: "medium",
        createdAt: new Date().toISOString(),
      },
      {
        id: "ticket_3",
        title: "Update Profile Feature",
        description: "Add ability to update user profile information",
        status: "closed",
        priority: "low",
        createdAt: new Date().toISOString(),
      }
    ];
    localStorage.setItem("tickets", JSON.stringify(sampleTickets));
  }
}

function getTickets() {
  return JSON.parse(localStorage.getItem("tickets") || "[]");
}

function saveTickets(tickets) {
  localStorage.setItem("tickets", JSON.stringify(tickets));
}

// =========================
// CRUD FUNCTIONS
// =========================
function createTicket(ticket) {
  const tickets = getTickets();
  tickets.push({ id: Date.now().toString(), ...ticket, createdAt: new Date() });
  saveTickets(tickets);
}

function updateTicket(id, data) {
  const updated = getTickets().map(t => t.id === id ? { ...t, ...data } : t);
  saveTickets(updated);
}

function deleteTicket(id) {
  const filtered = getTickets().filter(t => t.id !== id);
  saveTickets(filtered);
}

// =========================
// UI HELPERS
// =========================
function formatStatus(status) {
  return status.replace("_", " ").replace(/\b\w/g, c => c.toUpperCase());
}
function getPriorityColor(priority) {
  const map = { low: "#22c55e", medium: "#eab308", high: "#ef4444" };
  return map[priority] || "#6b7280";
}
function showToast(msg) {
  alert(msg);
}

// =========================
// PAGE LOGIC
// =========================
let editingTicketId = null;
let deleteTicketId = null;

function renderTickets() {
  const tickets = getTickets();
  const listEl = document.getElementById("tickets-list");
  const emptyEl = document.getElementById("empty-state");

  if (tickets.length === 0) {
    listEl.innerHTML = "";
    emptyEl.classList.remove("hidden");
    return;
  }

  emptyEl.classList.add("hidden");
  listEl.innerHTML = tickets.map(ticket => `
    <div class="ticket-card">
      <h3>${ticket.title}</h3>
      <p>${ticket.description || "No description provided"}</p>
      <div class="ticket-footer">
        <span>${formatStatus(ticket.status)} ‚Ä¢ 
          <span style="color:${getPriorityColor(ticket.priority)}">${ticket.priority.toUpperCase()}</span>
        </span>
        <div>
          <button onclick="editTicket('${ticket.id}')">‚úèÔ∏è</button>
          <button onclick="showDeleteModal('${ticket.id}')">üóëÔ∏è</button>
        </div>
      </div>
    </div>
  `).join("");
}

function showTicketForm(id = null) {
  editingTicketId = id;
  const form = document.getElementById("ticket-form");
  const title = document.getElementById("form-title");
  const btn = document.getElementById("submit-btn");
  const f = document.getElementById("ticket-submit-form");
  f.reset();
  form.classList.remove("hidden");

  if (id) {
    const ticket = getTickets().find(t => t.id === id);
    if (ticket) {
      document.getElementById("title").value = ticket.title;
      document.getElementById("description").value = ticket.description;
      document.getElementById("status").value = ticket.status;
      document.getElementById("priority").value = ticket.priority;
      title.textContent = "Edit Ticket";
      btn.textContent = "Update Ticket";
    }
  } else {
    title.textContent = "Create New Ticket";
    btn.textContent = "Create Ticket";
  }
}

function hideTicketForm() {
  document.getElementById("ticket-form").classList.add("hidden");
  editingTicketId = null;
}

function editTicket(id) {
  showTicketForm(id);
}

function showDeleteModal(id) {
  deleteTicketId = id;
  document.getElementById("delete-modal").classList.remove("hidden");
}
function hideDeleteModal() {
  document.getElementById("delete-modal").classList.add("hidden");
  deleteTicketId = null;
}
function confirmDelete() {
  if (deleteTicketId) {
    deleteTicket(deleteTicketId);
    showToast("Ticket deleted successfully!");
    renderTickets();
    hideDeleteModal();
  }
}

// =========================
// INIT
// =========================
document.getElementById("ticket-submit-form").addEventListener("submit", e => {
  e.preventDefault();
  const data = {
    title: document.getElementById("title").value,
    description: document.getElementById("description").value,
    status: document.getElementById("status").value,
    priority: document.getElementById("priority").value
  };
  if (editingTicketId) {
    updateTicket(editingTicketId, data);
    showToast("Ticket updated successfully!");
  } else {
    createTicket(data);
    showToast("Ticket created successfully!");
  }
  renderTickets();
  hideTicketForm();
});

protectPage();
initializeSampleTickets();
const user = getCurrentUser();
if (user) document.getElementById("username").textContent = user.username;
renderTickets();
</script>
{% endblock %}
{% endblock %}
