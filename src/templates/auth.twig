{% extends "layout.twig" %}

{% block title %}{{ isLogin ? 'Login' : 'Sign Up' }} - TicketFlow{% endblock %}

{% block content %}
<div class="auth-container">
    <div class="auth-box">
        <h2 id="auth-title">{{ isLogin ? 'Welcome Back' : 'Create Account' }}</h2>

        <form id="auth-form">
            <!-- Email -->
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" required />
                <div id="email-error" class="error-message hidden"></div>
            </div>

            <!-- Username (Signup only) -->
            <div class="form-group" id="username-group" style="display: {{ isLogin ? 'none' : 'block' }}">
                <label for="username">Username</label>
                <input type="text" id="username" />
                <div id="username-error" class="error-message hidden"></div>
            </div>

            <!-- Password -->
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" required />
                <div id="password-error" class="error-message hidden"></div>
            </div>

            <!-- Confirm Password (Signup only) -->
            <div class="form-group" id="confirm-password-group" style="display: {{ isLogin ? 'none' : 'block' }}">
                <label for="confirmPassword">Confirm Password</label>
                <input type="password" id="confirmPassword" />
                <div id="confirmPassword-error" class="error-message hidden"></div>
            </div>

            <button type="submit" class="btn btn-primary" style="width: 100%; margin-top: 1rem">
                <span id="submit-text">{{ isLogin ? 'Login' : 'Sign Up' }}</span>
            </button>
        </form>

        <div class="auth-toggle">
            <p>
                {{ isLogin ? "Don't have an account?" : "Already have an account?" }}
                <button type="button" id="toggle-mode">
                    <span id="toggle-link-text">{{ isLogin ? 'Sign Up' : 'Login' }}</span>
                </button>
            </p>
        </div
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
  let isLogin = {{ isLogin ? 'true' : 'false' }};
  const toggleMode = document.getElementById('toggle-mode');
  const form = document.getElementById('auth-form');

  // Remove checkAuth() since we'll handle auth server-side
  
  toggleMode.addEventListener('click', () => {
    isLogin = !isLogin;
    const newUrl = `index.php?page=${isLogin ? 'login' : 'signup'}`;
    window.history.pushState({}, '', newUrl);
    document.getElementById('auth-title').textContent = isLogin ? 'Welcome Back' : 'Create Account';
    document.getElementById('submit-text').textContent = isLogin ? 'Login' : 'Sign Up';
    document.getElementById('toggle-link-text').textContent = isLogin ? 'Sign Up' : 'Login';
    document.getElementById('username-group').style.display = isLogin ? 'none' : 'block';
    document.getElementById('confirm-password-group').style.display = isLogin ? 'none' : 'block';
    document.getElementById('demo-info').style.display = isLogin ? 'block' : 'none';
    form.reset();
    
    // Clear any existing error messages
    const errorElements = document.querySelectorAll('.error-message');
    errorElements.forEach(el => {
      el.textContent = '';
      el.classList.add('hidden');
    });
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Get form data
    const formData = {
      email: email.value,
      username: username.value,
      password: password.value,
      confirmPassword: confirmPassword.value,
    };

    // Clear previous errors
    const errorElements = document.querySelectorAll('.error-message');
    errorElements.forEach(el => {
      el.textContent = '';
      el.classList.add('hidden');
    });

    // Validate form
    const errors = isLogin ? validateLoginForm(formData) : validateSignupForm(formData);
    if (Object.keys(errors).length > 0) {
      for (const field in errors) {
        const el = document.getElementById(field + '-error');
        if (el) {
          el.textContent = errors[field];
          el.classList.remove('hidden');
        }
      }
      return;
    }

    try {
      // Send request to auth handler
      const response = await fetch('auth_handler.php', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: isLogin ? 'login' : 'signup',
          ...formData
        })
      });

      const result = await response.json();
      
      if (result.success) {
        localStorage.setItem('ticketapp_user', JSON.stringify({
          email: formData.email,
          username: formData.username || formData.email.split('@')[0]
        }));
        
        showToast(isLogin ? 'Login successful!' : 'Account created successfully!', 'success');
        window.location.href = 'index.php?page=dashboard';
      } else {
        showToast(result.error || 'Authentication failed', 'error');
      }
    } catch (error) {
      showToast('An error occurred. Please try again.', 'error');
    }
  });
</script>
{% endblock %}
